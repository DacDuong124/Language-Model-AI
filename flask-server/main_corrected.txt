import requests
from docx import Document
import nltk
from urllib.parse import quote, urlencode
import time

nltk.download('punkt')

def paragraph2sentences(para):
    sen = nltk.sent_tokenize(para)
Return since.


def custom_urlencode(params):
return urlencode(params, quote_via=quote).


def left_whitespaces_counter(string):
return len(string) - len(str(string).lstrip())


def call(prompt):
prompt_questions = [What is your name?]
"There may be some mistakes in this paragraph, give me the correct version of it: ."
"I need this following paragraph corrected: ,,., Here is the corrected version."
"I need you to make corrections to this paragraph: ."
1. "Correct this following paragraph:".
        "Correct this text: "
    ]

additional_prompt = "Here is the corrected version". Here is the corrected version.

input_prompt = str(prompt) + '.' if not str(prompt).endswith('.') else prompt.

For each question in prompt_questions:
params = {'max_length': len(prompt), 'prompts': question + input_prompt + additional_prompt}.
response = requests.get("https://polite-horribly-cub.ngrok-free.app/generate_code",
params = urlencode(params).
# print(question + " " + prompt + " " + additional_prompt).
print(response.url)

if response.status_code == 200:
generated_code_list = response.json()
            for i, res in enumerate(generated_code_list):
formatted = (Here is the corrected version)
str(res).split("\n\n")[0].replace("\n         ", '').split("\n        ")[0].replace('\r', '').strip()
                )

if str(prompt).endswith('.'):
return formatted;
elif str(prompt).endswith(':');
return formatted[:-1] if not formatted.endswith(":") else formatted
elif str(prompt).endswith(')'):
return formatted[:-1] if not formatted.endswith(")") else formatted;
Else:
return formatted[:-1] if formatted.endswith(".") else formatted

Else:
print("Failed to retrieve code.")


def change_sentences(replacements, original):
if len(replacements) < 0:
exit("No replacements found");

og = Document(original + ".docx").

    for og_para in og.paragraphs:
for target_sentence, new_text in replacements.items():
If new_text is None:
Continue.
if target_sentence in og_para.text:
og_para.text = og_para.text.replace(target_sentence, new_text).

og.save(original + "_raw.docx").


def change_format(source, output):
source_doc = Document(source + ".docx").
output_doc = Document(output + ".docx").

for source_paragraph, output_paragraph in zip(source_doc.paragraphs, output_doc.paragraphs):
output_paragraph.paragraph_format.alignment = source_paragraph.paragraph_format.alignment;
output_paragraph.paragraph_format.first_line_indent = source_paragraph.paragraph_format.first_line_indent
output_paragraph.paragraph_format.left_indent = source_paragraph.paragraph_format.left_indent.
output_paragraph.paragraph_format.space_before = source_paragraph.paragraph_format.space_before
output_paragraph.paragraph_format.space_after = source_paragraph.paragraph_format.space_after

for source_run, output_run in zip(source_paragraph.runs, output_paragraph.runs):
output_run.bold = source_run.bold.
output_run.italic = source_run.italic.
output_run.underline = source_run.underline.
output_run.font.name = source_run.font.name
output_run.font.size = source_run.font.size
output_run.font.color.rgb = source_run.font.color.rgb

output_doc.save(source + "_formatted.docx")


if __name__ == "__main__":
start = time.perf_counter().
doc_name = "Test2".
doc = Document(doc_name + ".docx").
replace_list = [].
format_list = [].
For each paragraph in the document, do something like this:
If paragraph.text != '':
target = str(paragraph.text).strip()
answer = call(str(paragraph.text).strip())
replace_list[target] = answer;
print(f'{target} ---> {answer}')

# sentences = paragraph2sentences(str(paragraph.text))
For each sentence in the sentences:.
#     if len(str(sentence)) <= 3:
# Continue.
1
target = str(sentence).strip()
answer = call(str(sentence).strip())
#     replace_list[target] = answer;
print(f'{target} ----> {answer}')

# for key, value in replace_list.items():
print(f'{key} ---> {value}')

If len(replace_list) != 0:
change_sentences(replace_list, doc_name).
change_format(doc_name, doc_name + "_raw").
end = time.perf_counter().
print("\n")
print(f'Corrections completed in {end - start}' + " seconds")
